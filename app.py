
import sys
from PyQt5 import QtWidgets, QtGui, QtCore
from apscheduler.schedulers.qt import QtScheduler
from apscheduler.triggers import interval
from datetime import datetime

from designer import Ui_window
from weather import latlon, current_weather


class App(QtWidgets.QMainWindow):

    def __init__(self):
        super(App, self).__init__()

        # Call the class generated by the .ui file
        # from QT Designer.
        self.ui = Ui_window()
        self.ui.setupUi(self)

        # Make window frameless.
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)

        self.months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', ' Jun',
                       'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
        self.weekdays = ['Monday', 'Tuesdag', 'Wednesday', 'Thursday',
                         'Friday', 'Saturday', 'Sunday']
        self.direction = {'\u2191': [330, 30],  # N
                          '\u2196': [310, 320],  # NW
                          '\u2190': [240, 300],  # W
                          '\u2199': [200, 230],  # SW
                          '\u2193': [150, 190],  # S
                          '\u2198': [130, 140],  # SE
                          '\u2192': [60, 120],  # E
                          '\u2197': [40, 50]}  # NE

        self.scheduler = QtScheduler()
        self.set_time()
        self.set_weather()
        self.schedule()
        self.show()

    def mousePressEvent(self, event):
        # Function that gets called from parent object
        # when a mouse press is detected.
        if event.buttons() == QtCore.Qt.LeftButton or event.buttons() == QtCore.Qt.RightButton:
            self.dragPos = event.globalPos()
            event.accept()

    def mouseMoveEvent(self, event):
        # Function that gets called from parent object
        # when mouse movement is detected.
        if event.buttons() == QtCore.Qt.LeftButton or event.buttons() == QtCore.Qt.RightButton:
            if not self.ui.pin.isChecked():
                self.move(self.pos() + event.globalPos() - self.dragPos)
                self.dragPos = event.globalPos()
                event.accept()

    def schedule(self):
        # Schedule functions to run at certain intervals.
        self.scheduler.add_job(self.set_weather, trigger=interval.IntervalTrigger(minutes=15))
        self.scheduler.add_job(self.set_time, trigger=interval.IntervalTrigger(seconds=1))
        self.scheduler.start()

    def set_time(self):
        # Update the window with the current time.
        now = datetime.now()
        date = datetime.today()
        self.ui.time.setText(now.strftime('%H:%M:%S'))
        self.ui.day.setText(self.weekdays[datetime.today().weekday()])
        self.ui.date.setText(f'{self.months[date.month - 1]}. {str(date.day)}. {str(date.year)[:2]}.')

    def set_weather(self):
        try:
            # Get the latitude and longitude of current IP and
            # then get the weather for said location.
            lat, lon = latlon('me')
            weather = current_weather(api_key='00b9948be25e5f3b11df215e6d5d8000', lat=lat, lon=lon)

            # Find the corresponding image to the weather description.
            weathericon = QtGui.QPixmap('images/' + weather['weather'][0]['icon'] + '.png')
            weathericon = weathericon.scaled(50, 50)

            # Find the corresponding arrow symbol to the wind direction.
            for di in self.direction:
                if di != '\u2191':
                    if self.direction[di][0] <= weather['wind']['deg'] <= self.direction[di][1]:
                        direction = di
                else:
                    if weather['wind']['deg'] > self.direction[di][0] or \
                            weather['wind']['deg'] < self.direction[di][1]:
                        direction = di

            # Update the window with the new data.
            self.ui.weathericon.setPixmap(weathericon)
            self.ui.description.setText(weather['weather'][0]['description'])
            self.ui.temp.setText(str(round(weather['main']['temp'] - 273.15, 1)) + u'\u2103')
            self.ui.wind.setText(direction + '  ' + str(weather['wind']['speed']) + ' m/s')
            self.ui.humidity.setText(str(weather['main']['humidity']) + '% Humidity')

        except TypeError:  # This will be raised if there is no internet connection.
            pass


if __name__ == '__main__':
    app = QtWidgets.QApplication([])
    application = App()
    sys.exit(app.exec())
